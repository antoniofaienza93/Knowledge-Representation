$(document).ready(function () {
    
    queryClassrooms(classrooms, (value) => classrooms = value);
    queryProfessors(professors, (value) => professors = value);
    queryCourses(courses, (value) => courses = value);
    
    var resultDiscipline = queryDisciplineAsync().then(function(matters){
        // setDiscipline(matters);
        for (var i = 0; i < matters.length; i++) {
            var prof = matters[i].getProfessor();
            // Set Professors
            for (var index = 0; index < prof.length; index++) {
                prof[index] = professors.find(o => o.id === prof[index]);
            }
            // SET Course
            matters[i].setCourse(courses.find(o => o.id === matters[i].getCourse()));
    
            // Defaul preference
            matters[i].splitDurationLessons6h(3);
        }

        return matters;
    });

    
    

    

    $("#generateCalendar").click(function () {   
        var c = $("#courseDisciplineDropDown").val();
        var y = $("#yearDisciplineDropDown").val();
        var sem = $("#semesterDisciplineDropDown").val();
        events.splice(0,events.length);
        // events = [];
        calendar.init();
        
        resultDiscipline.then(function(result){
            setDiscipline(result, y, sem, c)
            startGenerationCalendar();
        });
               
    });
});

function queryDisciplineAsync(){
    return queryDiscipline();
}





function setDiscipline(disciplines, y, sem, c) {   

    var subjectSelected = [];
    timetable.tt.splice(0,timetable.tt.length)

    for (var i = 0; i < disciplines.length; i++) {
        if (disciplines[i].getYear() == y && disciplines[i].getSemester() == sem && disciplines[i].getCourse().getName() == c) {
            // console.log(disciplines[i]);
            // fill array for calendar
            subjectSelected.push(disciplines[i]);
        }
        if (disciplines[i].getYear() == y && disciplines[i].getSemester() == sem && c == "ALL") {
            // console.log(disciplines[i]);
            // fill array for calendar
            subjectSelected.push(disciplines[i]);
        } 
    }

  

    console.log(subjectSelected);

    for (var i = 0; i < subjectSelected.length; i++) {

        var randomClassroom = classrooms[Math.floor(Math.random() * classrooms.length)];
        // var randomDay = days[Math.floor(Math.random() * days.length)];
        var subjectWeeksHours = subjectSelected[i].getWeeksHours();
        // var subjectWeeksHours = DURATION_LESSON;
        if (subjectWeeksHours < 4) {
            timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
        }
        if (subjectWeeksHours == 4) {
            timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
            timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
        }
        if (subjectWeeksHours == 5) {
            timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 3, randomClassroom));
            timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
        }
        if (subjectWeeksHours == 6) {

            if (subjectSelected[i].getSplitDuration(2)) {

                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
            }
            else if (subjectSelected[i].getSplitDuration(3)) {

                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 3, randomClassroom));
                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 3, randomClassroom));
            }
            else {
                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 2, randomClassroom));
                timetable.tt.push(new Lesson("Monday", subjectSelected[i], START_LESSONS, START_LESSONS + 4, randomClassroom));
            }

        }

    }
    
    
}


function startGenerationCalendar() {
    console.log(timetable.tt);
    assert(timetable);
    reactor.run(Infinity, true, function () {
        console.log("END");
        // var output = JSON.stringify({ timetable }, null, " ");
        // console.log(output);        
        for (var i = 0; i < timetable.tt.length; i++) {
            var numDay = defineDayNumber(timetable.tt[i].getDay());
            var newEvent = {
                start: now.startOf('week').add(numDay, 'days').add(timetable.tt[i].getStartLesson(), 'h').add(00, 'm').format('X'),
                end: now.startOf('week').add(numDay, 'days').add(timetable.tt[i].getEndLesson(), 'h').format('X'),
                title: timetable.tt[i].getDiscipline().getAbbreviation() + ' - ' + timetable.tt[i].getClassroom().getName(),
                content: "<strong>CORSO:</strong>: " + timetable.tt[i].getDiscipline().getCourse() + "<br>" + "<br>" +
                    "<strong>MATERIA:</strong> " + timetable.tt[i].getDiscipline().getName() + "<br>" +
                    "<strong>PROFESSORE:</strong> " + timetable.tt[i].getDiscipline().getAllProfessor() + "<br>" + "<br>" +
                    "<strong>AULA:</strong>" + timetable.tt[i].getClassroom(),
                category: timetable.tt[i].getDiscipline().getCourse()
            }
            events.push(newEvent);
        }
        calendar.init();
    });    

}